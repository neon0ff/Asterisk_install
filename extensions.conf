; extensions.conf - the Asterisk dial plan

[general]

static=yes

writeprotect=no

clearglobalvars=no

[globals]
MIXMON_BEEP =
MONITOR_REC_OPTION = b
MIXMON_DIR = /CallRecords/AstrNumber/
MIXMON_POST =
MIXMON_FORMAT = wav
CONSOLE=Console/dsp                             ; Console interface for demo
TRUNK=DAHDI/G2
CONSOLE=Console/dsp                             ; Console interface for demo

TRUNKMSD=1                                      ; MSD digits to strip (usually 1 or 0)

[dundi-e164-customers]

[dundi-e164-via-pstn]

[dundi-e164-local]

include => dundi-e164-canonical
include => dundi-e164-customers
include => dundi-e164-via-pstn

[dundi-e164-switch]

switch => DUNDi/e164

[dundi-e164-lookup]

include => dundi-e164-local
include => dundi-e164-switch

[dundi-e164]

exten => s,1,Goto(${ARG1},1)
include => dundi-e164-lookup

[iax2-trunk]
exten => _555XXXX,1,Dial(IAX2/username:secret@example.com/${EXTEN}@some-dialplan-context)


[iaxprovider]

[trunkint]

exten => _9011.,1,Gosub(dundi-e164,s,1(${EXTEN:4}))
;       same => n,Hangup()
exten => _9011.,n,Dial(${GLOBAL(TRUNK)}/${FILTER(0-9,${EXTEN:${GLOBAL(TRUNKMSD)}})})

[trunkld]

exten => _91NXXNXXXXXX,1,Gosub(dundi-e164,s,1(${EXTEN:1}))
exten => _91NXXNXXXXXX,n,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

[trunklocal]

exten => _9NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

[trunktollfree]

exten => _91800NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
exten => _91888NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
exten => _91877NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
exten => _91866NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

[international]

ignorepat => 9
include => longdistance
include => trunkint

[longdistance]

ignorepat => 9
include => local
include => trunkld

[local]

ignorepat => 9
include => default
include => trunklocal
include => iax2-trunk
include => trunktollfree
include => iaxprovider


include => parkedcalls

[outbound-freenum]

exten => _X*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXXXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)

[outbound-freenum2]

exten => _X!,1,Verbose(2,Performing ISN lookup for ${EXTEN})
        same => n,Set(SUFFIX=${CUT(EXTEN,*,2-)})                                ; make sure the suffix is all digits as well
        same => n,GotoIf($["${FILTER(0-9,${SUFFIX})}" != "${SUFFIX}"]?fn-CONGESTION,1)
                                                                        ; filter out bad characters per the README-SERIOUSLY.best-practices.txt document
        same => n,Set(TIMEOUT(absolute)=10800)
        same => n,Set(isnresult=${ENUMLOOKUP(${EXTEN},sip,,1,freenum.org)})     ; perform our lookup with freenum.org
        same => n,GotoIf($["${isnresult}" != ""]?from)
        same => n,Set(DIALSTATUS=CONGESTION)
        same => n,Goto(fn-CONGESTION,1)
        same => n(from),Set(__SIPFROMUSER=${CALLERID(num)})
        same => n,GotoIf($["${GLOBAL(FREENUMDOMAIN)}" = ""]?dial)               ; check if we set the FREENUMDOMAIN global variable in [global]
        same => n,Set(__SIPFROMDOMAIN=${GLOBAL(FREENUMDOMAIN)})                 ;    if we did set it, then we'll use it for our outbound dialing domain
        same => n(dial),Dial(SIP/${isnresult},40)
        same => n,Goto(fn-${DIALSTATUS},1)

exten => fn-BUSY,1,Busy()

exten => _f[n]-.,1,NoOp(ISN: ${DIALSTATUS})
same => n,Congestion()

[trunkdial]

exten => s,1,StackPop()
        same => n,Dial(${ARG1})
exten => s,n,Goto(s-${DIALSTATUS},1)
exten => s-NOANSWER,1,Hangup()
exten => s-BUSY,1,PlayTones(busy)
        same => n,Wait(60)
        same => n,Hangup()
exten => s-CHANUNAVAIL,1,PlayTones(congestion)
        same => n,Wait(60)
        same => n,Hangup()
exten => s-CONGESTION,1,PlayTones(congestion)
        same => n,Wait(60)
        same => n,Hangup()
exten => _s-.,1,NoOp(${DIALSTATUS})
        same => n,Hangup()

[stdexten]

exten => _X.,50000(stdexten),NoOp(Start stdexten)
        same => n,Set(LOCAL(ext)=${EXTEN})
        same => n,Set(LOCAL(dev)=${ARG1})
        same => n,Set(LOCAL(cntx)=${ARG2})
        same => n,Set(LOCAL(mbx)=${ext}${IF($[!${ISNULL(${cntx})}]?@${cntx})})
        same => n,Dial(${dev},20)                               ; Ring the interface, 20 seconds maximum
        same => n,Goto(stdexten-${DIALSTATUS},1)                ; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

exten => stdexten-NOANSWER,1,VoiceMail(${mbx},u)        ; If unavailable, send to voicemail w/ unavail announce
        same => n,Return()                      ; If they press #, return to start

exten => stdexten-BUSY,1,VoiceMail(${mbx},b)            ; If busy, send to voicemail w/ busy announce
        same => n,Return()                      ; If they press #, return to start

exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)    ; Treat anything else as no answer

exten => a,1,VoiceMailMain(${mbx})                      ; If they press *, send the user into VoicemailMain
exten => a,n,Return()

[stdPrivacyexten]

exten => _X.,60000(stdPrivacyexten),NoOp(Start stdPrivacyexten)
        same => n,Set(LOCAL(ext)=${ARG1})
        same => n,Set(LOCAL(dev)=${ARG2})
        same => n,Set(LOCAL(dontcntx)=${ARG3})
        same => n,Set(LOCAL(tortcntx)=${ARG4})
        same => n,Set(LOCAL(cntx)=${ARG5})

exten => _X.,n,Set(LOCAL(mbx)="${ext}"$["${cntx}" ? "@${cntx}" :: ""])
        same => n,Dial(${dev},20,p)                     ; Ring the interface, 20 seconds maximum, call screening
                                                ; option (or use P for databased call _X.screening)
        same => n,Goto(stdexten-${DIALSTATUS},1)                ; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

exten => stdexten-NOANSWER,1,VoiceMail(${mbx},u)        ; If unavailable, send to voicemail w/ unavail announce
        same => n,NoOp(Finish stdPrivacyexten NOANSWER)
        same => n,Return()                      ; If they press #, return to start

exten => stdexten-BUSY,1,VoiceMail(${mbx},b)            ; If busy, send to voicemail w/ busy announce
        same => n,NoOp(Finish stdPrivacyexten BUSY)
        same => n,Return()                      ; If they press #, return to start

exten => stdexten-DONTCALL,1,Goto(${dontcntx},s,1)      ; Callee chose to send this call to a polite "Don't call again" script.

exten => stdexten-TORTURE,1,Goto(${tortcntx},s,1)       ; Callee chose to send this call to a telemarketer torture script.

exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)    ; Treat anything else as no answer

exten => a,1,VoiceMailMain(${mbx})              ; If they press *, send the user into VoicemailMain
        same => n,Return()

[sub-page]

exten => s,1,ChanIsAvail(${ARG1},s)                     ; s is for ANY call
        same => n,GotoIf($["${AVAILSTATUS}" = "1"]?autoanswer:fail)
        same => n(autoanswer),Set(_ALERT_INFO="RA")                     ; This is for the PolyComs
        same => n,SIPAddHeader(Call-Info: Answer-After=0)       ; This is for the Grandstream, Snoms, and Others
        same => n,NoOp()                                        ; Add others here and Post on the Wiki!!!!
        same => n,Dial(${ARG1})
        same => n(fail),Hangup()

[demo]
include => stdexten

exten => s,1,Wait(1)                    ; Wait a second, just for fun
        same => n,Answer()                      ; Answer the line
        same => n,Set(TIMEOUT(digit)=5) ; Set Digit Timeout to 5 seconds
        same => n,Set(TIMEOUT(response)=10)     ; Set Response Timeout to 10 seconds
        same => n(restart),BackGround(demo-congrats)    ; Play a congratulatory message
        same => n(instruct),BackGround(demo-instruct)   ; Play some instructions
        same => n,WaitExten()           ; Wait for an extension to be dialed.

exten => 2,1,BackGround(demo-moreinfo)  ; Give some more information.
exten => 2,n,Goto(s,instruct)

exten => 3,1,Set(CHANNEL(language)=fr)          ; Set language to french
        same => n,Goto(s,restart)               ; Start with the congratulations

exten => 1000,1,Goto(default,s,1)

exten => 1234,1,Playback(transfer,skip)         ; "Please hold while..."
                                        ; (but skip if channel is not up)
        same => n,Gosub(${EXTEN},stdexten(${GLOBAL(CONSOLE)}))
        same => n,Goto(default,s,1)             ; exited Voicemail

exten => 1235,1,VoiceMail(1234,u)               ; Right to voicemail

exten => 1236,1,Dial(Console/dsp)               ; Ring forever
        same => n,VoiceMail(1234,b)             ; Unless busy


exten => #,1,Playback(demo-thanks)      ; "Thanks for trying the demo"
        same => n,Hangup()                      ; Hang them up.


exten => t,1,Goto(#,1)                  ; If they take too long, give up
exten => i,1,Playback(invalid)          ; "That's not valid, try again"


exten => 600,1,Playback(demo-echotest)  ; Let them know what's going on
        same => n,Echo()                        ; Do the echo test
        same => n,Playback(demo-echodone)       ; Let them know it's over
        same => n,Goto(s,6)             ; Start over

;       You can use the page subroutine to intercom a individual user
exten => 76245,1,Gosub(page,s,1(SIP/Grandstream1))
; or if your peernames are the same as extensions
exten => _7XXX,1,Gosub(page,s,1(SIP/${EXTEN}))

exten => 7999,1,Set(TIMEOUT(absolute)=60)
        same => n,Page(Local/Grandstream1@page&Local/Xlite1@page&Local/1234@page/n,d)


exten => 8500,1,VoiceMailMain()
        same => n,Goto(s,6)


[page]
exten => _X.,1,Gosub(sub-page,s,1(SIP/${EXTEN}))
        same => n,Hangup()


[public]

include => demo

[default]

include => demo



[time]
exten => _X.,30000(time),NoOp(Time: ${EXTEN} ${timezone})
        same => n,Wait(0.25)
        same => n,Answer()

        same => n,Set(FUTURETIME=$[${EPOCH} + 12])
        same => n,SayUnixTime(${FUTURETIME},Zulu,HNS)
        same => n,SayPhonetic(z)

        same => n,SayUnixTime(${FUTURETIME},${timezone},HNS)
        same => n,Playback(spy-local)
        same => n,WaitUntil(${FUTURETIME})
        same => n,Playback(beep)
        same => n,Return()

[ani]
exten => _X.,40000(ani),NoOp(ANI: ${EXTEN})
        same => n,Wait(0.25)
        same => n,Answer()
        same => n,Playback(vm-from)
        same => n,SayDigits(${CALLERID(ani)})
        same => n,Wait(1.25)
        same => n,SayDigits(${CALLERID(ani)})   ; playback again in case of missed digit
        same => n,Return()


[from-plusofon1]
exten => ID,1,Playback(demo-congrats)
exten => ID,n,Hangup

[to-plusofon1]
exten => _X.,1,Gosub(sub-record-check,s,1(out,${EXTEN},force)
exten => _X.,n,Dial(PJSIP/${EXTEN}@plusofon1)

[send-filename]
exten => s,1,Set(__CURL_DATA=--data-urlencode "filename=${ARG1}" --data-urlencode "sip=${ARG2}" --data-urlencode "target=${ARG3}")
same => n,System(echo "CURL_DATA=${CURL_DATA}" >> /home/ubuntu/log-sub-check.txt)
same => n,System(curl -X POST ${CURL_DATA} domain_crm/v6_0/api/save-audio-request-call > /tmp/curl_response.txt 2>/tmp/curl_error.txt)
same => n,Set(__LOG_ENTRY=${STRFTIME(${EPOCH},%Y-%m-%d-%H:%M:%S)}-${ARG1}-${ARG2}-${ARG3})
same => n,System(echo ${LOG_ENTRY} >> /home/ubuntu/log-sub-check.txt)
same => n,System(cat /tmp/curl_response.txt >> /home/ubuntu/log-sub-check.txt)
same => n,Set(__CURL_STATUS=${SHELL(curl -o /dev/null -Isw '%{http_code}\n' https://492x9ud43mz9xi49xm342sda.com/v6_0/api/save-audio-request-call)})
same => n,System(echo "HTTP Status Code: ${CURL_STATUS}" >> /home/ubuntu/log-sub-check.txt)
same => n,System(cat /tmp/curl_error.txt >> /home/ubuntu/log-sub-check.txt)

[sub-record-check]
exten => s,1,GotoIf($[${LEN(${FROMEXTEN})}]?initialized)
exten => s,n,Set(__REC_STATUS=INITIALIZED)
exten => s,n,Set(NOW=${EPOCH})
exten => s,n,Set(__DAY=${STRFTIME(${NOW},,%d)})
exten => s,n,Set(__MONTH=${STRFTIME(${NOW},,%m)})
exten => s,n,Set(__YEAR=${STRFTIME(${NOW},,%Y)})
exten => s,n,Set(__TIMESTR=${YEAR}${MONTH}${DAY}-${STRFTIME(${NOW},,%H%M%S)})
exten => s,n,Set(__FROMEXTEN=${IF($[${LEN(${AMPUSER})}]?${AMPUSER}:${IF($[${LEN(${REALCALLERIDNUM})}]?${REALCALLERIDNUM}:unknown)})})
exten => s,n,Set(__MON_FMT=${IF($["${MIXMON_FORMAT}"="wav49"]?WAV:${MIXMON_FORMAT})})
exten => s,n(initialized),Noop(Recordings initialized)
exten => s,n,ExecIf($[!${LEN(${ARG3})}]?Set(ARG3=dontcare))
exten => s,n,Set(REC_POLICY_MODE_SAVE=${REC_POLICY_MODE})
exten => s,n,ExecIf($["${BLINDTRANSFER}${ATTENDEDTRANSFER}" != ""]?Set(REC_STATUS=NO))
exten => s,n(next),GotoIf($[${LEN(${ARG1})}]?checkaction)
exten => s,n(recorderror),Playback(something-terribly-wrong,error)
exten => s,n,Hangup
exten => s,n(checkaction),GotoIf($[${DIALPLAN_EXISTS(sub-record-check,${ARG1})}]?sub-record-check,${ARG1},1)
exten => s,n,Noop(Generic ${ARG1} Recording Check - ${FROMEXTEN} ${ARG2})
exten => s,n,Gosub(recordcheck,1(${ARG3},${ARG1},${ARG2}))
exten => s,n,Return()

exten => recordcheck,1,Noop(Starting recording check against ${ARG1})
exten => recordcheck,n,Goto(${ARG1})
exten => recordcheck,n(dontcare),Return()
exten => recordcheck,n(always),Noop(Detected legacy "always" entry. Mapping to "force")
exten => recordcheck,n(force),Set(__REC_POLICY_MODE=FORCE)
exten => recordcheck,n,GotoIf($["${REC_STATUS}"!="RECORDING"]?startrec)
exten => recordcheck,n,Return()
exten => recordcheck,n(delayed),Noop(Detected legacy "delayed" entry. Mapping to "yes")
exten => recordcheck,n,Set(__REC_POLICY_MODE=YES)
exten => recordcheck,n,Goto(startrec)
exten => recordcheck,n(no),Set(__REC_POLICY_MODE=NO)
exten => recordcheck,n,Return()
exten => recordcheck,n(never),Set(__REC_POLICY_MODE=NEVER)
exten => recordcheck,n,Goto(stoprec)
exten => recordcheck,n(startrec),Noop(Starting recording: ${ARG2}, ${ARG3})
exten => recordcheck,n,ExecIf($["${FROMQUEUEEXTEN}" != ""]?Set(RECFROMEXTEN=${FROMQUEUEEXTEN}))
exten => recordcheck,n,ExecIf($["${FROMQUEUEEXTEN}" == ""]?Set(RECFROMEXTEN=${FROMEXTEN}))
exten => recordcheck,n,Set(__CALLFILENAME=${ARG2}-${ARG3}-${RECFROMEXTEN}-${TIMESTR}-${UNIQUEID})
exten => recordcheck,n,MixMonitor(${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME}.${MON_FMT},a${MONITOR_REC_OPTION}i(${LOCAL_MIXMON_ID})${MIXMON_BEEP},${MIXMON_POST})
exten => recordcheck,n,Set(__MIXMON_ID=${LOCAL_MIXMON_ID})
exten => recordcheck,n,Set(CHANNEL(hangup_handler_push)=send-filename,s,1(${YEAR}/${MONTH}/${DAY}/${CALLFILENAME}.${MON_FMT},${CALLERID(num)},${ARG3}))
exten => recordcheck,n,Set(__RECORD_ID=${CHANNEL(name)})
exten => recordcheck,n,Set(__REC_STATUS=RECORDING)
exten => recordcheck,n,Set(CDR(recordingfile)=${CALLFILENAME}.${MON_FMT})
exten => recordcheck,n,Return()
exten => recordcheck,n(stoprec),Noop(Stopping recording: ${ARG2}, ${ARG3})
exten => recordcheck,n,Set(__REC_STATUS=STOPPED)
exten => recordcheck,n,System(${AMPBIN}/stoprecording.php "${CHANNEL(name)}")
exten => recordcheck,n,Return()

exten => out,1,Noop(Outbound Recording Check from ${FROMEXTEN} to ${ARG2})
exten => out,n,Set(RECMODE=${DB(AMPUSER/${FROMEXTEN}/recording/out/external)})
exten => out,n,ExecIf($[!${LEN(${RECMODE})} | "${RECMODE}" = "dontcare"]?Goto(routewins))
exten => out,n,ExecIf($["${ARG3}" = "never" | "${ARG3}" = "force"]?Goto(routewins))
exten => out,n(extenwins),Gosub(recordcheck,1(${RECMODE},out,${ARG2}))
exten => out,n,Return()
exten => out,n(routewins),Gosub(recordcheck,1(${ARG3},out,${ARG2}))
exten => out,n,Return()

exten => in,1,Noop(Inbound Recording Check to ${ARG2})
exten => in,n,Set(FROMEXTEN=unknown)
exten => in,n,ExecIf($[${LEN(${CALLERID(num)})}]?Set(FROMEXTEN=${CALLERID(num)}))
exten => in,n,Gosub(recordcheck,1(${ARG3},in,${ARG2}))
exten => in,n,Return()

exten => exten,1,Noop(Exten Recording Check between ${FROMEXTEN} and ${ARG2})
exten => exten,n,Set(CALLTYPE=${IF($[${LEN(${FROM_DID})}]?external:internal)})
exten => exten,n,ExecIf(${LEN(${CALLTYPE_OVERRIDE})}?Set(CALLTYPE=${CALLTYPE_OVERRIDE}))
exten => exten,n,Set(CALLEE=${DB(AMPUSER/${ARG2}/recording/in/${CALLTYPE})})
exten => exten,n,ExecIf($[!${LEN(${CALLEE})}]?Set(CALLEE=dontcare))
exten => exten,n,GotoIf($["${CALLTYPE}"="external"]?callee)
exten => exten,n,GotoIf($["${CALLEE}"="dontcare"]?caller)
exten => exten,n,ExecIf($[${LEN(${DB(AMPUSER/${FROMEXTEN}/recording/priority)})}]?Set(CALLER_PRI=${DB(AMPUSER/${FROMEXTEN}/recording/priority)}):Set(CALLER_PRI=0))
exten => exten,n,ExecIf($[${LEN(${DB(AMPUSER/${ARG2}/recording/priority)})}]?Set(CALLEE_PRI=${DB(AMPUSER/${ARG2}/recording/priority)}):Set(CALLEE_PRI=0))
exten => exten,n,GotoIf($["${CALLER_PRI}"="${CALLEE_PRI}"]?${REC_POLICY}:${IF($[${CALLER_PRI}>${CALLEE_PRI}]?caller:callee)})
exten => exten,n(callee),Gosub(recordcheck,1(${CALLEE},${CALLTYPE},${ARG2}))
exten => exten,n,Return()
exten => exten,n(caller),Set(RECMODE=${DB(AMPUSER/${FROMEXTEN}/recording/out/internal)})
exten => exten,n,Set(CALLERRECMODE=${DB(AMPUSER/${FROMEXTEN}/recording/out/internal)})
exten => exten,n,Set(CALEERECMODE=${DB(AMPUSER/${ARG2}/recording/in/internal)})
exten => exten,n,GotoIf($[!${LEN(${CALEERECMODE})}]?processnormal)
exten => exten,n,ExecIf($["${CALLER_PRI}" = "${CALLEE_PRI}" & "${CALEERECMODE}"="never"]?Set(RECMODE=${CALEERECMODE}))
exten => exten,n,ExecIf($["${CALLER_PRI}" = "${CALLEE_PRI}" & "${CALEERECMODE}"="force" & "${CALLERRECMODE}"="no"]?Set(RECMODE=${CALEERECMODE}))
exten => exten,n,ExecIf($["${CALLER_PRI}" = "${CALLEE_PRI}" & "${CALEERECMODE}"="force" & "${CALLERRECMODE}"="never"]?Set(RECMODE=${CALEERECMODE}))
exten => exten,n,ExecIf($["${CALLER_PRI}" = "${CALLEE_PRI}" & "${CALEERECMODE}"="never" & "${CALLERRECMODE}"="force"]?Set(RECMODE=${CALEERECMODE}))
exten => exten,n(processnormal),ExecIf($[!${LEN(${RECMODE})}]?Set(RECMODE=dontcare))
exten => exten,n,ExecIf($["${RECMODE}"="dontcare"]?Set(RECMODE=${CALLEE}))
exten => exten,n,Gosub(recordcheck,1(${RECMODE},${CALLTYPE},${ARG2}))
exten => exten,n,Return()

exten => conf,1,Noop(Conference Recording Check ${FROMEXTEN} to ${ARG2})
exten => conf,n,Gosub(recconf,1(${ARG2},${ARG2},${ARG3}))
exten => conf,n,Return()

exten => page,1,Noop(Paging Recording Check ${FROMEXTEN} to ${ARG2})
exten => page,n,GosubIf($["${REC_POLICY_MODE}"="always"]?recconf,1(${ARG2},${FROMEXTEN},${ARG3}))
exten => page,n,Return()

exten => recconf,1,Noop(Setting up recording: ${ARG1}, ${ARG2}, ${ARG3})
exten => recconf,n,Set(__CALLFILENAME=${IF($[${CONFBRIDGE_INFO(parties,${ARG2})}]?${DB(RECCONF/${ARG2})}:${ARG1}-${ARG2}-${ARG3}-${TIMESTR}-${UNIQUEID})})
exten => recconf,n,ExecIf($[!${CONFBRIDGE_INFO(parties,${ARG2})}]?Set(DB(RECCONF/${ARG2})=${CALLFILENAME}))
exten => recconf,n,Set(CONFBRIDGE(bridge,record_file)=${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME}.${MON_FMT})
exten => recconf,n,ExecIf($["${ARG3}"!="always"]?Return())
exten => recconf,n,Set(CONFBRIDGE(bridge,record_conference)=yes)
exten => recconf,n,Set(CONFBRIDGE(bridge,record_file_timestamp)=no)
exten => recconf,n,Set(__REC_STATUS=RECORDING)
exten => recconf,n,Set(CDR(recordingfile)=${IF($[${CONFBRIDGE_INFO(parties,${ARG2})}]?${CALLFILENAME}.${MON_FMT}:${CALLFILENAME}.${MON_FMT})})
exten => recconf,n,Noop(${MIXMONITOR_FILENAME})
exten => recconf,n,Set(CHANNEL(hangup_handler_push)=sub-record-hh-check,s,1)
exten => recconf,n,Return()

exten => recq,1,Noop(Setting up recording: ${ARG1}, ${ARG2}, ${ARG3})
exten => recq,n,Set(MONITOR_FILENAME=${MIXMON_DIR}${YEAR}/${MONTH}/${DAY}/${CALLFILENAME})
exten => recq,n,MixMonitor(${MONITOR_FILENAME}.${MON_FMT},${EVAL(${MONITOR_OPTIONS})}${MIXMON_BEEP},${EVAL(${MIXMON_POST})})
exten => recq,n,Set(__REC_STATUS=RECORDING)
exten => recq,n,Set(CDR(recordingfile)=${CALLFILENAME}.${MON_FMT})
exten => recq,n,Return()

exten => parking,1,Noop(User ${ARG2} picked up a parked call)
exten => parking,n,Set(USER=${ARG2})
exten => parking,n,ExecIf($[!${LEN(${ARG2})}]?Set(USER=unknown))
exten => parking,n,Set(RECMODE=${DB(AMPUSER/${ARG2}/recording/out/internal)})
exten => parking,n,ExecIf($[!${LEN(${RECMODE})}]?Set(RECMODE=dontcare))
exten => parking,n,Gosub(recordcheck,1(${RECMODE},parked,${USER}))
exten => parking,n,Return()

;--== end of [sub-record-check] ==--;
